name: OSX CI
on:
  push:
    paths-ignore:
      - "*.md"
      - .circleci/
      - docs/
      - run_route_scripts/
      - test_requests/
    branches:
      - master
      - nn-python-packaging-osx
  # pull_request:
  #   paths-ignore:
  #     - "*.md"
  #     - .circleci/
  #     - docs/
  #     - run_route_scripts/
  #     - test_requests/
  #   branches:
  #     - master
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: "Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)"
        required: false
        default: false

jobs:
  build_osx:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          # we need to fetch all tags for setuptools-scm to work properly
          fetch-depth: 0
          fetch-tags: true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          HOMEBREW_NO_AUTO_UPDATE=1 brew install python autoconf automake protobuf cmake ccache libtool sqlite3 libspatialite luajit curl wget czmq lz4 spatialite-tools unzip boost gdal
          export PATH="$(brew --prefix python)/libexec/bin:$PATH"
          sudo python -m pip install --break-system-packages requests shapely
          git clone https://github.com/kevinkreiser/prime_server --recurse-submodules && cd prime_server && ./autogen.sh && ./configure && make -j$(sysctl -n hw.logicalcpu) && sudo make install

      - name: Get branch name
        run: echo "VALHALLA_BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV

      - name: Restore ccache
        id: cache-ccache-restore
        uses: actions/cache/restore@v4
        with:
          path: ~/Library/Caches/ccache
          key: ccache-osx-${{ env.VALHALLA_BRANCH }}
          restore-keys: |
            ccache-osx-master
            ccache-osx-

      - name: Configure CMake
        run: cmake -B build -DENABLE_SINGLE_FILES_WERROR=OFF -DENABLE_GDAL=ON

      - name: Build & install Valhalla (for python bindings)
        run: make -C build -j$(sysctl -n hw.logicalcpu) && sudo make -C build install

      # - name: Build Tests
      #   run: make -C build -j$(sysctl -n hw.logicalcpu) tests

      # - name: Delete cache to save the latest
      #   run: |
      #     KEY="ccache-osx-${{ env.VALHALLA_BRANCH }}"
      #     gh cache delete ${KEY} || true
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Save ccache
      #   uses: actions/cache/save@v4
      #   with:
      #     path: ~/Library/Caches/ccache
      #     key: ${{ steps.cache-ccache-restore.outputs.cache-primary-key }}

      # - name: Run Tests
      #   run: make -C build -j$(sysctl -n hw.logicalcpu) check
      
      # only package python bindings if it's not a PR

      - name: Determine package to publish
        # if: github.event_name != 'pull_request'
        run: |
          VALHALLA_RELEASE_PKG="pyvalhalla"
          if [[ "${GITHUB_REF#refs/heads/}" != "refs/tags*" ]]; then
            VALHALLA_RELEASE_PKG="${VALHALLA_RELEASE_PKG}-git"
          fi
          echo "VALHALLA_RELEASE_PKG=${VALHALLA_RELEASE_PKG}" >> $GITHUB_ENV
      
      - uses: pypa/cibuildwheel@v2.23.3
        # if: github.event_name != 'pull_request'
        env:
          CIBW_ENVIRONMENT: >
            VALHALLA_RELEASE_PKG=${{ env.VALHALLA_RELEASE_PKG }}
          MACOSX_DEPLOYMENT_TARGET: 14

      - name: Upload wheels
        # if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          path: wheelhouse/*.whl

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        # only run this if manually invoked or a previous job failed
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.debug_enabled) || failure() }}
        with:
          detached: true
          timeout-minutes: 15

  upload_all:
    name: Upload if release
    needs: [build_osx]
    runs-on: ubuntu-latest
    # if: github.event_name != 'pull_request'

    permissions:
      id-token: write # This is required for requesting the JWT from Github for PyPI

    steps:
    - uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - uses: actions/download-artifact@v4
      with:
        name: artifact
        path: dist

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@v1.12.4
      with:
        # TODO: publish to real PyPI once all platforms are ready
        repository-url: https://test.pypi.org/legacy/
        verbose: true
